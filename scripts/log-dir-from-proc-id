#!/usr/bin/env -S uv run --no-project --script
"""Parses the comment from a process ID."""

import argparse
import datetime
import json
import os
from pathlib import Path

CACHE_LOC = Path.home() / ".cache" / "proc_id_jobs.json"


def get_processes_no_cache(just_today: bool) -> dict[int, tuple[str, datetime.datetime]] | None:
    """Caches the comments for all jobs from today."""

    log_dir_str = os.environ.get("LOG_DIR")
    if log_dir_str is None:
        return
    log_dir = Path(log_dir_str)
    if not log_dir.is_dir():
        return

    processes: dict[int, tuple[str, datetime.datetime]] = {}
    for info_file in log_dir.glob("*day/**/info.json" if just_today else "**/info.json"):
        try:
            with open(info_file) as f:
                info = json.load(f)
            if "process_id" not in info:
                continue
            process_id = info["process_id"]
            exp_dir = info_file.parent.resolve()
            launch_time = datetime.datetime.fromisoformat(info["job"]["start_time"])
            processes[process_id] = (str(exp_dir), launch_time)
        except Exception:
            raise

    return processes


def get_processes_cache() -> dict[int, tuple[str, datetime.datetime]] | None:
    if not CACHE_LOC.exists():
        return None
    with open(CACHE_LOC) as f:
        return json.load(f)


def save_cache(jobs: dict[str, tuple[str, datetime.datetime]]) -> None:
    cache_str = json.dumps(
        {job_id: (path, launch_time.isoformat()) for job_id, (path, launch_time) in jobs.items()},
        indent=2,
    )
    with open(CACHE_LOC, "w") as f:
        f.write(cache_str)


def get_processes(process_id: int) -> dict[str, tuple[str, datetime.datetime]]:
    processes = get_processes_cache()
    if processes is not None and process_id in processes:
        return processes
    for just_today in (True, False):
        processes = get_processes_no_cache(just_today)
        if processes is not None and process_id in processes:
            save_cache(processes)
            return processes
    raise RuntimeError(f"Could not find directory for process {process_id}")


def get_process_path(process_id: int) -> str:
    processes = get_processes(process_id)
    exp_dir, _ = processes[process_id]
    return exp_dir


def main() -> None:
    parser = argparse.ArgumentParser(description="Gets the path for a process ID")
    parser.add_argument("process_id", type=int, help="The process ID to look up")
    parser.add_argument("-s", "--silent", action="store_true", help="If set, don't show exceptions")
    args = parser.parse_args()

    try:
        process_path = get_process_path(args.process_id)
        print(process_path)
    except Exception:
        if not args.silent:
            raise


if __name__ == "__main__":
    main()
