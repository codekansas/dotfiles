#!/usr/bin/env -S uv run --no-project --script
"""Script which creates a new VSCode workspace from a given directory.

The new workspace is stored under `~/.code-workspaces` and is named after
the directory name. The workspace has two folders: the given directory and
the `~/.code-workspaces` directory itself.
"""

import argparse
import json
import os
import shutil
from pathlib import Path
from typing import Dict, List, Union


def clean_name(dir_name: str) -> str:
    """Converts directory name into a name suitable for VSCode workspace.

    Args:
        dir_name: Directory name.

    Returns:
        Cleaned name.
    """

    # Replaces all non-alphanumeric characters with a space.
    name = "".join(c if c.isalnum() else " " for c in dir_name)

    # Removes all leading and trailing spaces.
    name = name.strip()

    # Replaces all consecutive spaces with a single space.
    name = " ".join(name.split())

    # Capitalizes the first letter of each word.
    name = " ".join(word.capitalize() for word in name.split(" "))

    return name


def recursive_merge(config: Union[Dict, List], old_config: Union[Dict, List]) -> None:
    """Recursively merges from old config into new config.

    Args:
        config: New config.
        old_config: Old config.
    """

    if isinstance(config, dict) and isinstance(old_config, dict):
        for key, value in old_config.items():
            if key in config:
                if isinstance(value, (dict, list)):
                    recursive_merge(config[key], value)
                elif config[key] != value:
                    print(f"Ignoring key {key} in old config")
            else:
                print(f"Adding new key {key} from old config")
                config[key] = value

    elif isinstance(config, list) and isinstance(old_config, list):
        for value in old_config:
            if value not in config:
                print(f"Adding new value {value} from old config")
                config.append(value)

    else:
        raise ValueError(f"Cannot merge {type(config)} and {type(old_config)}")


def main():
    """Create a new VSCode workspace from the current directory."""

    parser = argparse.ArgumentParser(description="Creates a new VSCode workspace from a given directory.")
    parser.add_argument("-n", "--no-update", default=False, action="store_true", help="Update existing workspace.")
    args = parser.parse_args()

    directory = Path.cwd()
    code_ws_directory = Path("~/.code-workspaces").expanduser()
    code_ws_directory.mkdir(exist_ok=True, parents=True)
    workspace_file = (code_ws_directory / f"{directory.name}.code-workspace").resolve()

    if args.no_update:
        for i in range(1, 1000):
            if not workspace_file.exists():
                break
            print(f"Workspace {workspace_file} already exists, trying another name")
            workspace_file = code_ws_directory / f"{directory.name}-{i}.code-workspace"
        is_new = True
    else:
        is_new = not workspace_file.exists()

    print("┌─" + "─" * len(str(workspace_file)) + "─┐")
    print(f"│ {workspace_file} │")
    print("└─" + "─" * len(str(workspace_file)) + "─┘")

    settings = {}
    cmake_configure_settings = {}
    cmake_environment = {}
    cmake_prefix_paths = []

    # Adds Ruff path if it is available.
    if (ruff_path := shutil.which("ruff")) is not None:
        settings["ruff.path"] = [ruff_path]

    # Adds cmake-format path if available.
    if (cmake_format_path := shutil.which("cmake-format")) is not None:
        settings["cmakeFormat.exePath"] = cmake_format_path

    # Adds clang-format path if available.
    if (clang_format_path := shutil.which("clang-format")) is not None:
        settings["clang-format.executable"] = clang_format_path

    # Adds python path if available.
    if (python_path := shutil.which("python")) is not None:
        settings["python.defaultInterpreterPath"] = python_path
        cmake_configure_settings["PYTHON_EXECUTABLE"] = python_path

    # Adds CMake path, if CMake is installed.
    if (cmake_path := shutil.which("cmake")) is not None:
        settings["cmake.cmakePath"] = cmake_path

    # Adds NVCC path if available.
    if (nvcc_path := shutil.which("nvcc")) is not None:
        cmake_configure_settings["CMAKE_CUDA_COMPILER"] = str(Path(nvcc_path).resolve())

    if "CONDA_PREFIX" in os.environ:
        conda_prefix = Path(os.environ["CONDA_PREFIX"]).resolve()

        # Adds conda prefix to environment.
        cmake_environment["CONDA_PREFIX"] = str(conda_prefix)

    # Gets PyTorch settings.
    try:
        import torch

        cmake_prefix_paths += [str(Path(torch.__file__).parent / "share" / "cmake")]

        try:
            major_ver, minor_ver = torch.cuda.get_device_capability()
            cmake_configure_settings["TORCH_CUDA_ARCH_LIST"] = f"'{major_ver}.{minor_ver}'"

        except Exception as e:
            print(f"Failed to get CUDA architecture list: {e}")

    except ModuleNotFoundError:
        print("PyTorch not found, skipping")

    # Gets Pybind11 settings.
    try:
        import pybind11

        cmake_prefix_paths += [pybind11.get_cmake_dir()]
    except ModuleNotFoundError:
        print("Pybind11 not found, skipping")

    if cmake_prefix_paths:
        cmake_configure_settings["CMAKE_PREFIX_PATH"] = cmake_prefix_paths

    if cmake_configure_settings:
        settings["cmake.configureSettings"] = cmake_configure_settings

    if cmake_environment:
        settings["cmake.environment"] = cmake_environment

    config = {
        "folders": [
            {
                "name": clean_name(directory.name),
                "path": str(directory),
            },
            {
                "name": "Workspaces",
                "path": str(code_ws_directory),
            },
        ],
        "settings": settings,
    }

    if workspace_file.exists():
        try:
            with open(workspace_file, "r") as f:
                old_config = json.load(f)

        except json.JSONDecodeError:
            old_config = {}

        recursive_merge(config, old_config)

    with open(workspace_file, "w", encoding="utf-8") as f:
        json.dump(config, f, indent=2, sort_keys=True)

    print(f"{'Created' if is_new else 'Updated'} workspace {workspace_file}")


if __name__ == "__main__":
    main()
