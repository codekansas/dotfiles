#!/usr/bin/env -S uv run --script

import argparse
import subprocess
import sys
import threading
from io import StringIO
from typing import List

import pandas as pd


def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Benchmarks GPU usage")
    parser.add_argument("-t", "--timeout", type=int, default=5,
                        help="Number of seconds to aggregate benchmarks")
    parser.add_argument("-l", "--loop-ms", type=int, default=100,
                        help="Number of milliseconds per loop")
    parser.add_argument("-f", "--format", choices=["markdown", "raw"], default="markdown",
                        help="Format to print the outputs")
    return parser.parse_args()


def run_command(cmd: List[str], timeout: int) -> str:
    kill = lambda process: process.kill()
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    timer = threading.Timer(timeout, kill, [process])

    try:
        timer.start()
        stdout, stderr = process.communicate()
        sys.stderr.buffer.write(stderr)
    finally:
        timer.cancel()

    return stdout


def main() -> None:
    args = get_args()

    query_str = ",".join([
        "gpu_name",
        "gpu_bus_id",
        "temperature.gpu",
        "utilization.gpu",
        "utilization.memory",
    ])

    cmd = [
        "nvidia-smi",
        f"--query-gpu={query_str}",
        "--format=csv",
        f"--loop-ms={args.loop_ms}",
    ]

    # Runs profiler.
    result = run_command(cmd, timeout=args.timeout)

    # Reads and aggregates profile results.
    stats = pd.read_csv(StringIO(result.decode("utf-8")), sep=", ", engine="python")
    stats["utilization.gpu"] = stats["utilization.gpu [%]"].apply(lambda x: float(x.strip()[:2]) / 100)
    stats["utilization.memory"] = stats["utilization.memory [%]"].apply(lambda x: float(x.strip()[:2]) / 100)
    
    gids = stats["pci.bus_id"].unique()
    for gid in gids:
        locs = stats.loc[stats["pci.bus_id"] == gid]
        mean = locs.mean(axis=0)
        p95 = locs.quantile(q=0.95, axis=0)
        p5 = locs.quantile(q=0.05, axis=0)

        print(f"\n----- {gid} -----")

        if args.format == "raw":
            print("\n" + "-" * 27)
            print(mean)
            print(p95)
            print(p5)
            print("-" * 27 + "\n")
        elif args.format == "markdown":
            print("| Metric               | Mean   | P95    | P5     |")
            print("| -------------------- | ------ | ------ | ------ |")
            for metric in ("temperature.gpu", "utilization.gpu", "utilization.memory"):
                print(f"| {metric:<20} | {mean[metric]:6.3f} | {p95[metric]:6.3f} | {p5[metric]:6.3f} |")
            print()
        else:
            raise NotImplementedError(f"Format not implemented: {args.format}")


if __name__ == "__main__":
    main()
