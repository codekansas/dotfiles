#!/usr/bin/env -S uv run --no-project --script

import argparse
import datetime
import re
import shutil
import sys
from collections import defaultdict
from pathlib import Path

# Matches dates like "2021-03-15"
DATE_REGEX = re.compile(r"^\d{4}-\d{2}-\d{2}$")

SPECIAL_DATES = {
    "today",
    "tomorrow",
    "yesterday",
}


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Manages files organized by date")
    parser.add_argument("path", help="Path to the root directory")
    parser.add_argument("-a", "--action", choices=["delete", "list", "sweep"], help="Action to take", default="list")
    parser.add_argument("-s", "--start-date", type=str, help="Start date")
    parser.add_argument("-e", "--end-date", type=str, help="End date")
    return parser.parse_args()


def is_date(s: str) -> bool:
    return bool(DATE_REGEX.search(s))


def main() -> None:
    args = parse_args()
    root = Path(args.path).expanduser()
    assert root.is_dir(), root
    files = list(root.glob("*"))
    today = datetime.date.today().strftime("%Y-%m-%d")

    start_date, end_date = args.start_date or today, args.end_date or today
    assert is_date(start_date), start_date
    assert is_date(end_date), end_date

    fpaths = defaultdict(list)
    for fpath in files:
        if fpath.stem in SPECIAL_DATES:
            fpaths["special"].append(fpath)
        elif not re.match(r"\d{4}-\d{2}-\d{2}", fpath.stem):
            fpaths["not-date"].append(fpath)
        elif fpath.stem < start_date:
            fpaths["early"].append(fpath)
        elif fpath.stem > end_date:
            fpaths["late"].append(fpath)
        else:
            fpaths["valid"].append(fpath)

    if args.action == "list":
        for fpath in fpaths["valid"]:
            print(fpath, file=sys.stdout)
    elif args.action == "delete":
        for fpath in fpaths["valid"]:
            print(f"Deleting {fpath}", file=sys.stderr)
            shutil.rmtree(fpath)
    elif args.action == "sweep":
        for fpath in fpaths["not-date"]:
            dpath = root / today / fpath.name
            dpath.parent.mkdir(exist_ok=True)
            print(f"Moving {fpath} to {dpath}", file=sys.stderr)
            shutil.move(fpath, dpath)
    else:
        raise NotImplementedError(f"Invalid action: {args.action}")


if __name__ == "__main__":
    main()
