#!/usr/bin/env -S uv run --script

import argparse
import functools
import json
import re
import subprocess
import sys
import threading
from pathlib import Path
from typing import Dict, List


def get_job_id_cache_path(stderr: bool) -> Path:
    return Path.home() / ".cache" / "slurm-log-files" / ("stderr.json" if stderr else "stdout.json")


@functools.lru_cache
def load_job_id_cache(stderr: bool) -> Dict[str, str]:
    cache_path = get_job_id_cache_path(stderr)
    if not cache_path.exists():
        return {}
    with open(cache_path, "r", encoding="utf-8") as f:
        return json.load(f)


def save_job_id_cache(job_ids: Dict[str, str], stderr: bool) -> None:
    cache_path = get_job_id_cache_path(stderr)
    cache_path.parent.mkdir(exist_ok=True, parents=True)
    with open(cache_path, "w", encoding="utf-8") as f:
        json.dump(job_ids, f, indent=2)


def save_to_cache(job_id: str, fpath: Path, stderr: bool) -> None:
    job_ids = load_job_id_cache(stderr)
    job_ids[job_id] = str(fpath)
    save_job_id_cache(job_ids, stderr)


def cleanup(proc: subprocess.Popen, command: List[str]) -> None:
    print(f"Timeout while calling {' '.join(command)}", file=sys.stderr)
    proc.kill()


def run_command(cmd: List[str], timeout: int) -> str:
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    timer = threading.Timer(timeout, cleanup, [process, cmd])

    try:
        timer.start()
        stdout, stderr = process.communicate()
        sys.stderr.buffer.write(stderr)
    finally:
        timer.cancel()

    return stdout.decode("utf-8")


def get_job_id_path(job_id: str, stderr: bool) -> Path:
    job_id_cache = load_job_id_cache(stderr)
    if job_id in job_id_cache:
        return Path(job_id_cache[job_id])

    # Runs `scontrol` to parse the output paths.
    scontrol_result = run_command(["scontrol", "show", "job", job_id], 30)
    stdout_path_re = re.search(r"StdOut=(.+)\n", scontrol_result)
    stderr_path_re = re.search(r"StdErr=(.+)\n", scontrol_result)
    if stdout_path_re is None or stderr_path_re is None:
        raise RuntimeError(f"Invalid job ID: {job_id}")
    stdout_path = Path(stdout_path_re.group(1))
    stderr_path = Path(stderr_path_re.group(1))
    if not stdout_path.exists() or not stderr_path.exists():
        raise RuntimeError(f"Missing {stdout_path} or {stderr_path}")

    # Saves paths to the appropriate caches.
    save_to_cache(job_id, stdout_path, False)
    save_to_cache(job_id, stderr_path, True)

    return stderr_path if stderr else stdout_path


def main() -> None:
    """Gets the slurm log files from job ID."""

    parser = argparse.ArgumentParser(description="Gets the slurm StdOut and StdErr files from job ID")
    parser.add_argument("job_id", help="The job ID to look up")
    parser.add_argument("-e", "--error", default=False, action="store_true", help="Get stderr instead of stdout")
    args = parser.parse_args()

    job_id_path = get_job_id_path(args.job_id, args.error)
    print(job_id_path)


if __name__ == "__main__":
    main()
