#!/usr/bin/env -S uv run --no-project --script
"""Helper script to run an HTTP server from a given directory."""

import argparse
import http.server
import io
import os
import re
import socket
import socketserver
import threading
import time
import urllib.parse
from http import HTTPStatus
from typing import BinaryIO, Tuple, Union

TEXT_MIMETYPES: Tuple[str, ...] = ("text/plain", "application/octet-stream")

# Maximum size of text file to render.
MAX_TEXT_FILE_SIZE = 512 * 1024

# Buffer size for copying file.
COPY_BUFSIZE = 64 * 1024


def get_free_port() -> Tuple[str, int]:
    """Returns an open port to connect to.

    Returns:
        The address and open port number
    """

    socket_ptr = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    socket_ptr.bind(("", 0))
    addr = socket_ptr.getsockname()
    port = addr
    socket_ptr.close()
    return port


def close_server(httpd: socketserver.TCPServer, wait_seconds: int) -> None:
    """Closes an active TCP server.

    Args:
        httpd: The server object being closed
        wait_seconds: Amount of time to wait before shutdown
    """

    time.sleep(wait_seconds)
    print(f"Closing thread after {wait_seconds} seconds")
    httpd.shutdown()


def sizeof_fmt(num: float, suffix: str = "B") -> str:
    """Converts raw number of bytes to a human-readable value.

    Args:
        num: The number of bytes to format as a string
        suffix: The additional suffix to add

    Returns:
        The number, formatted as a human-readable size
    """

    for unit in ["", "Ki", "Mi", "Gi", "Ti", "Pi", "Ei", "Zi"]:
        if abs(num) < 1024.0:
            return f"{num:3.1f}{unit}{suffix}"
        num /= 1024.0
    return f"{num:.1f}Yi{suffix}"


class RequestHandler(http.server.SimpleHTTPRequestHandler):
    """Custom request handler, which is more useful for debugging.

    This request handler is similar to the base request handler, except that it
    disables browser caching, displays text files in the browser by default
    (instead of downloading them), and truncates the displayed file if it is
    very large.
    """

    def send_head(self) -> Union[io.BytesIO, BinaryIO, None]:
        """Sends the head, always ignoring browser cache.

        Returns:
            The file pointer object

        Raises:
            Exception: On errors when sending particular header lines
        """

        path = self.translate_path(self.path)
        file_ptr = None
        if os.path.isdir(path):
            parts = urllib.parse.urlsplit(self.path)
            if not parts.path.endswith("/"):
                self.send_response(HTTPStatus.MOVED_PERMANENTLY)
                new_parts = (parts[0], parts[1], parts[2] + "/", parts[3], parts[4])
                new_url = urllib.parse.urlunsplit(new_parts)
                self.send_header("Location", new_url)
                self.send_header("Content-Length", "0")
                self.end_headers()
                return None
            for index in "index.html", "index.htm":
                index = os.path.join(path, index)
                if os.path.exists(index):
                    path = index
                    break
            else:
                return self.list_directory(path)
        ctype = self.guess_type(path)
        # check for trailing "/" which should return 404. See Issue17324
        # The test for this was added in test_httpserver.py
        # However, some OS platforms accept a trailingSlash as a filename
        # See discussion on python-dev and Issue34711 regarding
        # parseing and rejection of filenames with a trailing slash
        if path.endswith("/"):
            self.send_error(HTTPStatus.NOT_FOUND, "File not found")
            return None
        try:
            file_ptr = open(path, "rb")
        except OSError:
            self.send_error(HTTPStatus.NOT_FOUND, "File not found")
            return None

        try:
            file_stat = os.fstat(file_ptr.fileno())

            self.send_response(HTTPStatus.OK)

            # By default, always inline text files.
            if ctype in TEXT_MIMETYPES:
                self.send_header("Content-Type", "text/plain")
                self.send_header("Content-Disposition", "inline")
            else:
                self.send_header("Content-Type", ctype)

            self.send_header("Cache-Control", "no-store,no-cache,must-revalidate")
            self.send_header("Pragma", "no-cache")
            self.send_header("Content-Length", str(file_stat[6]))
            self.send_header(
                "Last-Modified", self.date_time_string(int(file_stat.st_mtime))
            )
            self.end_headers()
            return file_ptr
        except Exception:
            file_ptr.close()
            raise

    def do_GET(self) -> None:
        file_ptr = self.send_head()
        if file_ptr:
            try:
                self.copyfile_truncated(file_ptr, self.wfile)
            finally:
                file_ptr.close()

    def copyfile_truncated(self, src: BinaryIO, dst: BinaryIO) -> None:
        """Copies truncated file to the destination file.

        Args:
            src: The file to copy from
            dst: The file to copy to

        Returns:
            The result of `self.copyfile`
        """

        # Checks that there is a file corresponding to the path.
        if not os.path.isfile(self.translate_path(self.path)):
            return self.copyfile(src, dst)

        # Checks that the browser is requesting HTML rendering.
        accepts = self.headers.get("Accept", "").split(";")
        has_html = any("text/html" in accept.split(",") for accept in accepts)
        if not has_html:
            return self.copyfile(src, dst)

        # Checks that the file type is not an image.
        is_image = any(
            a.startswith("image/") for accept in accepts for a in accept.split(",")
        )
        if is_image:
            return self.copyfile(src, dst)

        # Gets the file size in bytes.
        path = self.translate_path(self.path)
        file_bytes = os.stat(path, follow_symlinks=True).st_size

        # Custom handling for text files; if the file is larger than 10
        # megabytes, render a truncated version of the file.
        for _ in range((MAX_TEXT_FILE_SIZE + COPY_BUFSIZE - 1) // COPY_BUFSIZE):
            buf = src.read(COPY_BUFSIZE)
            if not buf:
                break
            dst.write(buf)
        else:
            trunc_str = sizeof_fmt(MAX_TEXT_FILE_SIZE)
            byte_str = sizeof_fmt(file_bytes)
            end_str = f"Truncated to {trunc_str}; full file is {byte_str}"
            dst.write(str.encode(f"\n\n=== {end_str} ===\n\n"))
            src.seek(-COPY_BUFSIZE, io.SEEK_END)
            dst.write(src.read())
        return None


def main() -> None:
    """Runs an HTTP server from the current directory.

    Uses the SSH_CONNECTION environment variable to get the host address,
    if this script is running on a server.

    Raises:
        RuntimeError: If the SSH_CONNECTION environment variable is malformed
    """

    parser = argparse.ArgumentParser(description="Serves an HTTP server.")
    parser.add_argument("dir", nargs="?", default=None)
    parser.add_argument(
        "-w",
        "--wait-seconds",
        default=60 * 10,
        type=int,
        help="Number of seconds to wait",
    )
    parser.add_argument(
        "-p",
        "--port",
        type=int,
        help="A specific port to use",
    )
    args = parser.parse_args()

    if args.dir is not None:
        os.chdir(args.dir)

    addr, port = get_free_port()
    if args.port is not None:
        port = args.port
    handler = RequestHandler

    if "SSH_CONNECTION" in os.environ:
        addrs = re.findall(r"((\d+\.){3}\d+)", os.environ["SSH_CONNECTION"])
        if not addrs:
            raise RuntimeError(f"Unexpected {os.environ['SSH_CONNECTION']=}")
        host_addr = addrs[-1][0]
    else:
        host_addr = addr

    if "HTTP_SERVER_PORT" in os.environ:
        print(
            f"Using port {os.environ['HTTP_SERVER_PORT']=} instead of {port}; assuming localhost"
        )
        host_addr = "127.0.0.1"
        port = int(os.environ["HTTP_SERVER_PORT"])

        # Attempts to kill any pre-existing server on that port.
        try:
            import psutil

            for proc in psutil.process_iter():
                try:
                    for conn in proc.connections():
                        if conn.laddr.port == port:
                            print(f"Killing {proc.pid=} on {conn.laddr=}")
                            proc.kill()
                            proc.wait()
                            break

                except (psutil.NoSuchProcess, psutil.AccessDenied, IndexError):
                    pass

        except ModuleNotFoundError:
            print("`psutil` module is not installed; skipping")

    with socketserver.TCPServer((addr, port), handler) as httpd:
        httpd.allow_reuse_address = True
        print(f"Serving HTTP on {addr} port {port} (http://{host_addr}:{port}) ...")
        thread = threading.Thread(target=close_server, args=(httpd, args.wait_seconds))
        thread.daemon = True
        thread.start()

        try:
            httpd.serve_forever()

        except KeyboardInterrupt:
            print("Keyboard interrupt received, exiting.")
            httpd.shutdown()


if __name__ == "__main__":
    main()
