#!/usr/bin/env -S uv run --no-project --script

import argparse
import ast
import json
import re
import sys
# These are special objects required for eval.
from collections import OrderedDict
from pathlib import Path


def strip_string(s: str) -> str:
    def strip_part(s: str, prefix: str, postfix: str) -> str:
        s = s.strip()
        if s.startswith(prefix) and s.endswith(postfix):
            return strip_string(s[len(prefix):-len(postfix)])
        return s

    s = strip_part(s, "dict_keys(", ")")
    return s


class C:
    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Pretty printer")
    parser.add_argument("-f", "--file", help="Path to file")
    return parser.parse_args()


def print_json(text: str) -> bool:
    try:
        obj = json.loads(text)
        json_str = json.dumps(obj, indent=2, sort_keys=True)
        print(json_str, file=sys.stdout)
        return True
    except json.JSONDecodeError:
        return False


def print_pyobj(text: str) -> bool:
    try:
        obj = ast.literal_eval(text)
        json_str = json.dumps(obj, indent=2, sort_keys=True)
        print(json_str, file=sys.stdout)
        return True
    except (SyntaxError, ValueError):
        return False


def print_eval(text: str) -> bool:
    try:
        obj = eval(text)
        json_str = json.dumps(obj, indent=2, sort_keys=True)
        print(json_str, file=sys.stdout)
        return True
    except Exception as e:
        return False


def main() -> None:
    args = get_args()

    # Gets text content.
    if args.file is None:
        text = sys.stdin.read()
    else:
        with open(args.file, "r") as f:
            text = f.read()

    text_flat = re.sub(r"\s+", " ", text, flags=re.MULTILINE)
    text_flat = strip_string(text_flat)

    # Methods to try pretty-printing text.
    if print_json(text):
        return
    if print_json(text_flat):
        return
    if print_pyobj(text):
        return
    if print_pyobj(text_flat):
        return
    if print_eval(text):
        return
    if print_eval(text_flat):
        return

    print(f"{C.FAIL}{text}{C.ENDC}")
    raise NotImplementedError("Can't pretty print")


if __name__ == "__main__":
    main()
