#!/usr/bin/env -S uv run --script
"""Parses the comment from a Slurm job ID.

If called without any arguments, this script will cache the comments for all
jobs from today. If called with a job ID, it will print the comment for that
job ID.
"""

import argparse
import datetime
import json
import os
from pathlib import Path

CACHE_LOC = Path.home() / ".cache" / "slurm_jobs.json"


def get_jobs_no_cache(just_today: bool) -> dict[str, tuple[str, datetime.datetime]] | None:
    """Caches the comments for all jobs from today."""

    log_dir_str = os.environ.get("LOG_DIR")
    if log_dir_str is None:
        return
    log_dir = Path(log_dir_str)
    if not log_dir.is_dir():
        return

    jobs: dict[str, tuple[str, datetime.datetime]] = {}
    for slurm_info_file in log_dir.glob("*day/**/slurm_info.json" if just_today else "**/slurm_info.json"):
        try:
            with open(slurm_info_file) as f:
                slurm_info = json.load(f)
            for slurm_info_section in slurm_info:
                if "job_id" not in slurm_info_section:
                    continue
                job_id = slurm_info_section["job_id"]
                exp_dir = slurm_info_file.parent.resolve()
                launch_time = datetime.datetime.fromisoformat(slurm_info_section["job"]["launch_time"])
                jobs[job_id] = (str(exp_dir), launch_time)
        except Exception:
            raise

    return jobs


def get_jobs_cache() -> dict[str, tuple[str, datetime.datetime]] | None:
    if not CACHE_LOC.exists():
        return None
    with open(CACHE_LOC) as f:
        return json.load(f)


def save_cache(jobs: dict[str, tuple[str, datetime.datetime]]) -> None:
    cache_str = json.dumps(
        {
            job_id: (path, launch_time.isoformat())
            for job_id, (path, launch_time) in jobs.items()
        },
        indent=2,
    )
    with open(CACHE_LOC, "w") as f:
        f.write(cache_str)


def get_jobs(job_id: str) -> dict[str, tuple[str, datetime.datetime]]:
    jobs = get_jobs_cache()
    if jobs is not None and job_id in jobs:
        return jobs
    for just_today in (True, False):
        jobs = get_jobs_no_cache(just_today)
        if jobs is not None and job_id in jobs:
            save_cache(jobs)
            return jobs
    raise RuntimeError(f"Could not find directory for job {job_id}")


def get_job_path(job_id: str) -> str:
    jobs = get_jobs(job_id)
    exp_dir, _ = jobs[job_id]
    return exp_dir


def main() -> None:
    parser = argparse.ArgumentParser(description="Gets the path for a job ID")
    parser.add_argument("job_id", help="The job ID to look up")
    parser.add_argument("-s", "--silent", action="store_true", help="If set, don't show exceptions")
    args = parser.parse_args()

    try:
        job_path = get_job_path(args.job_id)
        print(job_path)
    except Exception:
        if not args.silent:
            raise


if __name__ == "__main__":
    main()
