[user]
    name = Benjamin Bolte
    email = ben@bolte.cc

[include]
    path = ~/.gitconfig_local

[alias]
    sync = !git pull && git push
    s = status
    l = log --graph --pretty=format:'%C(bold green)%h%Creset %C(bold blue)%an <%ae>%Creset %C(green)%cr%Creset %C(bold magenta)%D%Creset%n          %C(white)%<(80,mtrunc)%s%Creset%n'
    br = checkout -b
    # Master branch name
    mb = "!echo $(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')"
    brm = "!f() { \
        if [ $# -ne 1 ]; then \
            echo 'Usage: git brm <name>'; \
        else \
            git checkout -b $1 $(git mb); \
        fi \
    }; f"
    bd = branch -d
    bD = branch -D
    bl = branch --list
    ci = commit
    comit = commit
    a = add .
    cm = commit -m
    amend = commit --amend --no-edit
    co = checkout
    latest = "!git checkout $(git mb) && git pull"
    asdf = !git latest && git gone
    d = diff
    di = diff
    dif = diff
    dh = diff HEAD
    cp = cherry-pick
    wt = worktree
    rh = reset --hard
    # Checkout master, pull, then checkout original branch.
    pm = "!f() { \
        base_branch=$(git rev-parse --abbrev-ref HEAD); \
        echo 'Checking out $(git mb) branch'; \
        git checkout $(git mb); \
        git pull; \
        echo \"Checking out ${base_branch} branch\"; \
        git checkout ${base_branch}; \
        git gone; \
    }; f"
    # Uncommits last commit
    uncommit = reset HEAD~1
    # Rebase onto master, taking all current changes
    rbm = rebase $(git mb) -X ours
    # Pushes to upstream repo branch with the same name
    po = "!git push --set-upstream origin \"$(git rev-parse --abbrev-ref HEAD)\""
    # Force pulls from origin.
    fpull = "!f() { \
        if [ `git status --porcelain` ]; then \
            echo 'Found local changes; aborting' \
        else \
            branch=$(git rev-parse --abbrev-ref HEAD) \
            git fetch --all \
            git branch backup-${branch} \
            echo \"Created backup branch 'backup-${branch}'\" \
            git reset --hard origin/${branch} \
        fi \
    }"
    # Shows diff of last commit, or last N commits if provided
    last = "!f() { \
        if [ $# -gt 0 ]; then \
            n=$1; shift; git diff HEAD~${n} $@; \
        else \
            git diff HEAD^ $@; \
        fi }; f"
    # Clean up branches that have been deleted on remote
    gone = "!git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}' | xargs -r git branch -D"
    # Command for changing author for old commits
    change-commits = "!f() { \
        VAR=$1; OLD=$2; NEW=$3; shift 3; \
        git filter-branch --env-filter \"if [ \\\"$`echo $VAR`\\\" = '$OLD' ]; then export $VAR='$NEW'; fi\" $@; \
    }; f"
    mm = "!f() { \
        current_branch=$(git rev-parse --abbrev-ref HEAD); \
        if [ \"$current_branch\" = \"$(git mb)\" ]; then \
            echo 'Error: You are already on the $(git mb) branch'; \
            exit 1; \
        fi; \
        git checkout $(git mb); \
        git merge $current_branch; \
        git push origin $(git mb); \
        git checkout $current_branch; \
    }; f"

[core]
    excludesfile = ~/.gitignore_global
    attributesfile = ~/.gitattributes
    pager = diff-so-fancy | less --tabs=4 -R

[pull]
    rebase = true

[push]
    default = matching

[fetch]
    prune = true

[diff]
    colorMoved = zebra

[rerere]
    enabled = true

[branch]
    autoSetupMerge = always

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[filter "strip-notebook-output"]
    clean = "jupyter nbconvert --clear-output --to notebook --stdin --stdout --log-level=ERROR"

[interactive]
    diffFilter = diff-so-fancy --patch

[color]
    ui = true

[color "status"]
    branch = bold cyan
    added = green
    changed = yellow
    untracked = red

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "diff"]
    meta = 11
    frag = magenta bold
    func = 146 bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse

[init]
    defaultBranch = master
